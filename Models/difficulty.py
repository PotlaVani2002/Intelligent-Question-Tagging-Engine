# -*- coding: utf-8 -*-
"""Difficulty Level.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nZYk1DSlEXz1UDoMlF9Cyg5mhqLVexoz

# Difficulty Level
"""

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.pipeline import Pipeline
from sklearn.multiclass import OneVsRestClassifier
from sklearn.svm import LinearSVC
from sklearn.metrics import accuracy_score
from sklearn.exceptions import ConvergenceWarning
import warnings

# Load the dataset
df = pd.read_csv('Data2.csv')

df.head()

# Split the data into training and testing sets
X = df['Questions']
y_difficulty = df['Difficulty Level']
X_train, X_test, y_difficulty_train, y_difficulty_test = train_test_split(X, y_difficulty, test_size=0.2, random_state=42)

# Define the pipeline for category prediction
difficulty_pipeline = Pipeline([
    ('tfidf', TfidfVectorizer()),
    ('clf', OneVsRestClassifier(LinearSVC(max_iter=10000)))  # Increase max_iter parameter
])

# Define the hyperparameters to tune
parameters = {
    'tfidf__ngram_range': [(1, 1), (1, 2)],  # Unigrams or bigrams
    'clf__estimator__C': [1, 10, 100]  # Penalty parameter C of the error term
}

# Perform grid search to find the best hyperparameters
grid_search = GridSearchCV(difficulty_pipeline, parameters, cv=5)
grid_search.fit(X_train, y_difficulty_train)

# Get the best performing model
best_difficulty_pipeline = grid_search.best_estimator_

# Print the best hyperparameters
print("Best Hyperparameters:")
print(grid_search.best_params_)

# Make predictions on the test set for categories
y_difficulty_pred = best_difficulty_pipeline.predict(X_test)

# Calculate accuracy for category prediction
difficulty_accuracy = accuracy_score(y_difficulty_test, y_difficulty_pred)
print("Accuracy for difficulty prediction: {:.2f}%".format(difficulty_accuracy * 100))

"""# Testing"""

# New question to predict
new_question = "Who painted the Mona Lisa?"

# Use the trained model to predict the category
predicted_difficulty = best_difficulty_pipeline.predict([new_question])

print("Predicted difficulty:", predicted_difficulty[0])

import pickle

# Save the best performing model to a file
with open('Difficulty_model.pkl', 'wb') as file:
    pickle.dump(best_difficulty_pipeline, file)