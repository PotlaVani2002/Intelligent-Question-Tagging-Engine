# -*- coding: utf-8 -*-
"""taxonomy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lP5rGDEqA1PmJtY1vk1o5MgjxWOn4_nv
"""

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.pipeline import Pipeline
from sklearn.multiclass import OneVsRestClassifier
from sklearn.svm import LinearSVC
from sklearn.metrics import accuracy_score
from sklearn.exceptions import ConvergenceWarning
import warnings

# Load the dataset
#df = pd.read_csv('C:/Users/Lenovo/Downloads/Data2.csv')
df = pd.read_csv('Data2.csv')
df

#d.rename(columns={"topic": "Topic"}, inplace=True)
df.rename(columns={"Bloom's Taxonomy": "taxonomy"}, inplace=True)
df.rename(columns={"Category": "category"}, inplace=True)
df.rename(columns={"Difficulty Level": "difficulty"}, inplace=True)
df.rename(columns={"Questions":"question"},inplace=True)

# Split the data into training and testing sets
X = df['question']
y_taxonomy = df['taxonomy']
X_train, X_test, y_taxonomy_train, y_taxonomy_test = train_test_split(X, y_taxonomy, test_size=0.2, random_state=42)
vectorizer = TfidfVectorizer()

# Define the pipeline for taxonomy prediction
taxonomy_pipeline = Pipeline([
    ('tfidf', vectorizer),
    ('clf', OneVsRestClassifier(LinearSVC(max_iter=10000)))  # Increase max_iter parameter
])

# Define the hyperparameters to tune
parameters = {
    'tfidf__ngram_range': [(1, 1), (1, 2)],  # Unigrams or bigrams
    'clf__estimator__C': [1, 10, 100]  # Penalty parameter C of the error term
}

# Perform grid search to find the best hyperparameters
with warnings.catch_warnings():
    warnings.filterwarnings("ignore", category=ConvergenceWarning)
    grid_search = GridSearchCV(taxonomy_pipeline, parameters, cv=5)
    grid_search.fit(X_train, y_taxonomy_train)

# Get the best performing model
best_taxonomy_pipeline = grid_search.best_estimator_

# Make predictions on the test set for taxonomy
y_taxonomy_pred = best_taxonomy_pipeline.predict(X_test)

# Calculate accuracy for taxonomy prediction
taxonomy_accuracy = accuracy_score(y_taxonomy_test, y_taxonomy_pred)
print("Accuracy for taxonomy prediction: {:.2f}%".format(taxonomy_accuracy * 100))

# Print the best hyperparameters
print("Best Hyperparameters:")
print(grid_search.best_params_)

# New question to predict
new_question = "What is the main function of the kidneys in the human body?"

# Use the trained model to predict the taxonomy
predicted_taxonomy = best_taxonomy_pipeline.predict([new_question])

print("Predicted taxonomy:", predicted_taxonomy[0])

import pickle

# Save the best performing model to a file
with open('taxonomy_model.pkl', 'wb') as file:
    pickle.dump(best_taxonomy_pipeline, file)


# New question to predict
new_question = "What is the capital of France?"

"""# Load the saved vectorizer
with open('vectorizer.pkl', 'rb') as file:
    vectorizer = pickle.load(file)"""

with open('taxonomy_model.pkl', 'rb') as file:
    model = pickle.load(file)

# Use the trained model to predict the taxonomy
predicted_taxonomy = model.predict([new_question])

print("Predicted taxonomy:", predicted_taxonomy[0])


